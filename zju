#define CUSTOMFVF (D3DFVF_XYZ | D3DFVF_DIFFUSE)

// global declarations
LPDIRECT3D9 d3d;								// the pointer to our Direct3D interface
LPDIRECT3DDEVICE9 d3ddev;						// the pointer to the device class
LPDIRECT3DVERTEXBUFFER9 vertexbuffer = NULL;	// the pointer to the vertex buffer

// this is the function that puts the 3D models into video RAM
void init_graphics() {
	
    // create the vertices using the CUSTOMVERTEX struct
    CUSTOMVERTEX vertices[] =
    {
        { 3.0f, -3.0f, 0.0f, D3DCOLOR_XRGB(0, 0, 255)},
        { 0.0f,  3.0f, 0.0f, D3DCOLOR_XRGB(0, 255, 0)},
        {-3.0f, -3.0f, 0.0f, D3DCOLOR_XRGB(255, 0, 0)},
    };

    // create a vertex buffer interface called v_buffer
    d3ddev->CreateVertexBuffer(3 * sizeof(CUSTOMVERTEX), 0, CUSTOMFVF, D3DPOOL_MANAGED, &vertexbuffer, NULL);

    VOID* pVoid;

    // lock v_buffer and load the vertices into it
    vertexbuffer->Lock(0, 0, (void**)&pVoid, 0);
    memcpy(pVoid, vertices, sizeof(vertices));
    vertexbuffer->Unlock();
}
